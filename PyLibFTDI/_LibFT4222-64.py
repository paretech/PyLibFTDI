# generated by 'clang2py'
# flags '-c -d -l ftd2xx64.dll -l LibFT4222-64.dll LibFT4222.h -vvv -o _LibFT4222-64.py'
# -*- coding: utf-8 -*-
#
# TARGET arch is: []
# WORD_SIZE is: 4
# POINTER_SIZE is: 8
# LONGDOUBLE_SIZE is: 8
#
import ctypes


c_int128 = ctypes.c_ubyte*16
c_uint128 = c_int128
void = None
if ctypes.sizeof(ctypes.c_longdouble) == 8:
    c_long_double_t = ctypes.c_longdouble
else:
    c_long_double_t = ctypes.c_ubyte*8

# if local wordsize is same as target, keep ctypes pointer function.
if ctypes.sizeof(ctypes.c_void_p) == 8:
    POINTER_T = ctypes.POINTER
else:
    # required to access _ctypes
    import _ctypes
    # Emulate a pointer class using the approriate c_int32/c_int64 type
    # The new class should have :
    # ['__module__', 'from_param', '_type_', '__dict__', '__weakref__', '__doc__']
    # but the class should be submitted to a unique instance for each base type
    # to that if A == B, POINTER_T(A) == POINTER_T(B)
    ctypes._pointer_t_type_cache = {}
    def POINTER_T(pointee):
        # a pointer should have the same length as LONG
        fake_ptr_base_type = ctypes.c_uint32 
        # specific case for c_void_p
        if pointee is None: # VOID pointer type. c_void_p.
            pointee = type(None) # ctypes.c_void_p # ctypes.c_ulong
            clsname = 'c_void'
        else:
            clsname = pointee.__name__
        if clsname in ctypes._pointer_t_type_cache:
            return ctypes._pointer_t_type_cache[clsname]
        # make template
        class _T(_ctypes._SimpleCData,):
            _type_ = 'L'
            _subtype_ = pointee
            def _sub_addr_(self):
                return self.value
            def __repr__(self):
                return '%s(%d)'%(clsname, self.value)
            def contents(self):
                raise TypeError('This is not a ctypes pointer.')
            def __init__(self, **args):
                raise TypeError('This is not a ctypes pointer. It is not instanciable.')
        _class = type('LP_%d_%s'%(8, clsname), (_T,),{}) 
        ctypes._pointer_t_type_cache[clsname] = _class
        return _class

_libraries = {}
_libraries['LibFT4222-64.dll'] = ctypes.CDLL('LibFT4222-64.dll')


FT_HANDLE = POINTER_T(None)
DWORD = ctypes.c_uint32
BOOL = ctypes.c_int32
PVOID = POINTER_T(None)
uint8 = ctypes.c_ubyte
uint16 = ctypes.c_uint16
uint32 = ctypes.c_uint32
uint64 = ctypes.c_uint64
int8 = ctypes.c_byte
int16 = ctypes.c_int16
int32 = ctypes.c_int32
int64 = ctypes.c_int64

# values for enumeration 'FT4222_STATUS'
FT4222_OK = 0
FT4222_INVALID_HANDLE = 1
FT4222_DEVICE_NOT_FOUND = 2
FT4222_DEVICE_NOT_OPENED = 3
FT4222_IO_ERROR = 4
FT4222_INSUFFICIENT_RESOURCES = 5
FT4222_INVALID_PARAMETER = 6
FT4222_INVALID_BAUD_RATE = 7
FT4222_DEVICE_NOT_OPENED_FOR_ERASE = 8
FT4222_DEVICE_NOT_OPENED_FOR_WRITE = 9
FT4222_FAILED_TO_WRITE_DEVICE = 10
FT4222_EEPROM_READ_FAILED = 11
FT4222_EEPROM_WRITE_FAILED = 12
FT4222_EEPROM_ERASE_FAILED = 13
FT4222_EEPROM_NOT_PRESENT = 14
FT4222_EEPROM_NOT_PROGRAMMED = 15
FT4222_INVALID_ARGS = 16
FT4222_NOT_SUPPORTED = 17
FT4222_OTHER_ERROR = 18
FT4222_DEVICE_LIST_NOT_READY = 19
FT4222_DEVICE_NOT_SUPPORTED = 1000
FT4222_CLK_NOT_SUPPORTED = 1001
FT4222_VENDER_CMD_NOT_SUPPORTED = 1002
FT4222_IS_NOT_SPI_MODE = 1003
FT4222_IS_NOT_I2C_MODE = 1004
FT4222_IS_NOT_SPI_SINGLE_MODE = 1005
FT4222_IS_NOT_SPI_MULTI_MODE = 1006
FT4222_WRONG_I2C_ADDR = 1007
FT4222_INVAILD_FUNCTION = 1008
FT4222_INVALID_POINTER = 1009
FT4222_EXCEEDED_MAX_TRANSFER_SIZE = 1010
FT4222_FAILED_TO_READ_DEVICE = 1011
FT4222_I2C_NOT_SUPPORTED_IN_THIS_MODE = 1012
FT4222_GPIO_NOT_SUPPORTED_IN_THIS_MODE = 1013
FT4222_GPIO_EXCEEDED_MAX_PORTNUM = 1014
FT4222_GPIO_WRITE_NOT_SUPPORTED = 1015
FT4222_GPIO_PULLUP_INVALID_IN_INPUTMODE = 1016
FT4222_GPIO_PULLDOWN_INVALID_IN_INPUTMODE = 1017
FT4222_GPIO_OPENDRAIN_INVALID_IN_OUTPUTMODE = 1018
FT4222_INTERRUPT_NOT_SUPPORTED = 1019
FT4222_GPIO_INPUT_NOT_SUPPORTED = 1020
FT4222_EVENT_NOT_SUPPORTED = 1021
FT4222_FUN_NOT_SUPPORT = 1022
FT4222_STATUS = ctypes.c_int # enum

# values for enumeration 'FT4222_ClockRate'
SYS_CLK_60 = 0
SYS_CLK_24 = 1
SYS_CLK_48 = 2
SYS_CLK_80 = 3
FT4222_ClockRate = ctypes.c_int # enum

# values for enumeration 'FT4222_FUNCTION'
FT4222_I2C_MASTER = 1
FT4222_I2C_SLAVE = 2
FT4222_SPI_MASTER = 3
FT4222_SPI_SLAVE = 4
FT4222_FUNCTION = ctypes.c_int # enum

# values for enumeration 'FT4222_SPIMode'
SPI_IO_NONE = 0
SPI_IO_SINGLE = 1
SPI_IO_DUAL = 2
SPI_IO_QUAD = 4
FT4222_SPIMode = ctypes.c_int # enum

# values for enumeration 'FT4222_SPIClock'
CLK_NONE = 0
CLK_DIV_2 = 1
CLK_DIV_4 = 2
CLK_DIV_8 = 3
CLK_DIV_16 = 4
CLK_DIV_32 = 5
CLK_DIV_64 = 6
CLK_DIV_128 = 7
CLK_DIV_256 = 8
CLK_DIV_512 = 9
FT4222_SPIClock = ctypes.c_int # enum

# values for enumeration 'FT4222_SPICPOL'
CLK_IDLE_LOW = 0
CLK_IDLE_HIGH = 1
FT4222_SPICPOL = ctypes.c_int # enum

# values for enumeration 'FT4222_SPICPHA'
CLK_LEADING = 0
CLK_TRAILING = 1
FT4222_SPICPHA = ctypes.c_int # enum

# values for enumeration 'SPI_DrivingStrength'
DS_4MA = 0
DS_8MA = 1
DS_12MA = 2
DS_16MA = 3
SPI_DrivingStrength = ctypes.c_int # enum

# values for enumeration 'GPIO_Port'
GPIO_PORT0 = 0
GPIO_PORT1 = 1
GPIO_PORT2 = 2
GPIO_PORT3 = 3
GPIO_Port = ctypes.c_int # enum

# values for enumeration 'GPIO_Dir'
GPIO_OUTPUT = 0
GPIO_INPUT = 1
GPIO_Dir = ctypes.c_int # enum

# values for enumeration 'GPIO_Trigger'
GPIO_TRIGGER_RISING = 1
GPIO_TRIGGER_FALLING = 2
GPIO_TRIGGER_LEVEL_HIGH = 4
GPIO_TRIGGER_LEVEL_LOW = 8
GPIO_Trigger = ctypes.c_int # enum

# values for enumeration 'GPIO_Output'
GPIO_OUTPUT_LOW = 0
GPIO_OUTPUT_HIGH = 1
GPIO_Output = ctypes.c_int # enum

# values for enumeration 'I2C_MasterFlag'
NONE = 128
START = 2
Repeated_START = 3
STOP = 4
START_AND_STOP = 6
I2C_MasterFlag = ctypes.c_int # enum

# values for enumeration 'SPI_SlaveProtocol'
SPI_SLAVE_WITH_PROTOCOL = 0
SPI_SLAVE_NO_PROTOCOL = 1
SPI_SLAVE_NO_ACK = 2
SPI_SlaveProtocol = ctypes.c_int # enum
class struct_FT4222_Version(ctypes.Structure):
    _pack_ = True # source:False
    _fields_ = [
    ('chipVersion', ctypes.c_uint32),
    ('dllVersion', ctypes.c_uint32),
     ]

FT4222_Version = struct_FT4222_Version
class struct_SPI_Slave_Header(ctypes.Structure):
    _pack_ = True # source:False
    _fields_ = [
    ('syncWord', ctypes.c_ubyte),
    ('cmd', ctypes.c_ubyte),
    ('sn', ctypes.c_ubyte),
    ('size', ctypes.c_uint16),
     ]

FT4222_UnInitialize = _libraries['LibFT4222-64.dll'].FT4222_UnInitialize
FT4222_UnInitialize.restype = FT4222_STATUS
# FT4222_UnInitialize(ftHandle)
FT4222_UnInitialize.argtypes = [FT_HANDLE]
FT4222_UnInitialize.__doc__ = \
    """FT4222_STATUS FT4222_UnInitialize(FT_HANDLE ftHandle)
    LibFT4222.h:309"""
FT4222_SetClock = _libraries['LibFT4222-64.dll'].FT4222_SetClock
FT4222_SetClock.restype = FT4222_STATUS
# FT4222_SetClock(ftHandle, clk)
FT4222_SetClock.argtypes = [FT_HANDLE, FT4222_ClockRate]
FT4222_SetClock.__doc__ = \
    """FT4222_STATUS FT4222_SetClock(FT_HANDLE ftHandle, FT4222_ClockRate clk)
    LibFT4222.h:310"""
FT4222_GetClock = _libraries['LibFT4222-64.dll'].FT4222_GetClock
FT4222_GetClock.restype = FT4222_STATUS
# FT4222_GetClock(ftHandle, clk)
FT4222_GetClock.argtypes = [FT_HANDLE, POINTER_T(FT4222_ClockRate)]
FT4222_GetClock.__doc__ = \
    """FT4222_STATUS FT4222_GetClock(FT_HANDLE ftHandle, LP_FT4222_ClockRate clk)
    LibFT4222.h:311"""
FT4222_SetWakeUpInterrupt = _libraries['LibFT4222-64.dll'].FT4222_SetWakeUpInterrupt
FT4222_SetWakeUpInterrupt.restype = FT4222_STATUS
# FT4222_SetWakeUpInterrupt(ftHandle, enable)
FT4222_SetWakeUpInterrupt.argtypes = [FT_HANDLE, BOOL]
FT4222_SetWakeUpInterrupt.__doc__ = \
    """FT4222_STATUS FT4222_SetWakeUpInterrupt(FT_HANDLE ftHandle, BOOL enable)
    LibFT4222.h:312"""
FT4222_SetInterruptTrigger = _libraries['LibFT4222-64.dll'].FT4222_SetInterruptTrigger
FT4222_SetInterruptTrigger.restype = FT4222_STATUS
# FT4222_SetInterruptTrigger(ftHandle, trigger)
FT4222_SetInterruptTrigger.argtypes = [FT_HANDLE, GPIO_Trigger]
FT4222_SetInterruptTrigger.__doc__ = \
    """FT4222_STATUS FT4222_SetInterruptTrigger(FT_HANDLE ftHandle, GPIO_Trigger trigger)
    LibFT4222.h:313"""
FT4222_SetSuspendOut = _libraries['LibFT4222-64.dll'].FT4222_SetSuspendOut
FT4222_SetSuspendOut.restype = FT4222_STATUS
# FT4222_SetSuspendOut(ftHandle, enable)
FT4222_SetSuspendOut.argtypes = [FT_HANDLE, BOOL]
FT4222_SetSuspendOut.__doc__ = \
    """FT4222_STATUS FT4222_SetSuspendOut(FT_HANDLE ftHandle, BOOL enable)
    LibFT4222.h:314"""
FT4222_GetMaxTransferSize = _libraries['LibFT4222-64.dll'].FT4222_GetMaxTransferSize
FT4222_GetMaxTransferSize.restype = FT4222_STATUS
# FT4222_GetMaxTransferSize(ftHandle, pMaxSize)
FT4222_GetMaxTransferSize.argtypes = [FT_HANDLE, POINTER_T(ctypes.c_uint16)]
FT4222_GetMaxTransferSize.__doc__ = \
    """FT4222_STATUS FT4222_GetMaxTransferSize(FT_HANDLE ftHandle, LP_c_uint16 pMaxSize)
    LibFT4222.h:315"""
FT4222_SetEventNotification = _libraries['LibFT4222-64.dll'].FT4222_SetEventNotification
FT4222_SetEventNotification.restype = FT4222_STATUS
# FT4222_SetEventNotification(ftHandle, mask, param)
FT4222_SetEventNotification.argtypes = [FT_HANDLE, DWORD, PVOID]
FT4222_SetEventNotification.__doc__ = \
    """FT4222_STATUS FT4222_SetEventNotification(FT_HANDLE ftHandle, DWORD mask, PVOID param)
    LibFT4222.h:316"""
FT4222_GetVersion = _libraries['LibFT4222-64.dll'].FT4222_GetVersion
FT4222_GetVersion.restype = FT4222_STATUS
# FT4222_GetVersion(ftHandle, pVersion)
FT4222_GetVersion.argtypes = [FT_HANDLE, POINTER_T(struct_FT4222_Version)]
FT4222_GetVersion.__doc__ = \
    """FT4222_STATUS FT4222_GetVersion(FT_HANDLE ftHandle, LP_struct_FT4222_Version pVersion)
    LibFT4222.h:317"""
FT4222_ChipReset = _libraries['LibFT4222-64.dll'].FT4222_ChipReset
FT4222_ChipReset.restype = FT4222_STATUS
# FT4222_ChipReset(ftHandle)
FT4222_ChipReset.argtypes = [FT_HANDLE]
FT4222_ChipReset.__doc__ = \
    """FT4222_STATUS FT4222_ChipReset(FT_HANDLE ftHandle)
    LibFT4222.h:318"""
FT4222_SPIMaster_Init = _libraries['LibFT4222-64.dll'].FT4222_SPIMaster_Init
FT4222_SPIMaster_Init.restype = FT4222_STATUS
# FT4222_SPIMaster_Init(ftHandle, ioLine, clock, cpol, cpha, ssoMap)
FT4222_SPIMaster_Init.argtypes = [FT_HANDLE, FT4222_SPIMode, FT4222_SPIClock, FT4222_SPICPOL, FT4222_SPICPHA, uint8]
FT4222_SPIMaster_Init.__doc__ = \
    """FT4222_STATUS FT4222_SPIMaster_Init(FT_HANDLE ftHandle, FT4222_SPIMode ioLine, FT4222_SPIClock clock, FT4222_SPICPOL cpol, FT4222_SPICPHA cpha, uint8 ssoMap)
    LibFT4222.h:323"""
FT4222_SPIMaster_SetLines = _libraries['LibFT4222-64.dll'].FT4222_SPIMaster_SetLines
FT4222_SPIMaster_SetLines.restype = FT4222_STATUS
# FT4222_SPIMaster_SetLines(ftHandle, spiMode)
FT4222_SPIMaster_SetLines.argtypes = [FT_HANDLE, FT4222_SPIMode]
FT4222_SPIMaster_SetLines.__doc__ = \
    """FT4222_STATUS FT4222_SPIMaster_SetLines(FT_HANDLE ftHandle, FT4222_SPIMode spiMode)
    LibFT4222.h:324"""
FT4222_SPIMaster_SingleRead = _libraries['LibFT4222-64.dll'].FT4222_SPIMaster_SingleRead
FT4222_SPIMaster_SingleRead.restype = FT4222_STATUS
# FT4222_SPIMaster_SingleRead(ftHandle, buffer, bufferSize, sizeOfRead, isEndTransaction)
FT4222_SPIMaster_SingleRead.argtypes = [FT_HANDLE, POINTER_T(ctypes.c_ubyte), uint16, POINTER_T(ctypes.c_uint16), BOOL]
FT4222_SPIMaster_SingleRead.__doc__ = \
    """FT4222_STATUS FT4222_SPIMaster_SingleRead(FT_HANDLE ftHandle, LP_c_ubyte buffer, uint16 bufferSize, LP_c_uint16 sizeOfRead, BOOL isEndTransaction)
    LibFT4222.h:325"""
FT4222_SPIMaster_SingleWrite = _libraries['LibFT4222-64.dll'].FT4222_SPIMaster_SingleWrite
FT4222_SPIMaster_SingleWrite.restype = FT4222_STATUS
# FT4222_SPIMaster_SingleWrite(ftHandle, buffer, bufferSize, sizeTransferred, isEndTransaction)
FT4222_SPIMaster_SingleWrite.argtypes = [FT_HANDLE, POINTER_T(ctypes.c_ubyte), uint16, POINTER_T(ctypes.c_uint16), BOOL]
FT4222_SPIMaster_SingleWrite.__doc__ = \
    """FT4222_STATUS FT4222_SPIMaster_SingleWrite(FT_HANDLE ftHandle, LP_c_ubyte buffer, uint16 bufferSize, LP_c_uint16 sizeTransferred, BOOL isEndTransaction)
    LibFT4222.h:326"""
FT4222_SPIMaster_SingleReadWrite = _libraries['LibFT4222-64.dll'].FT4222_SPIMaster_SingleReadWrite
FT4222_SPIMaster_SingleReadWrite.restype = FT4222_STATUS
# FT4222_SPIMaster_SingleReadWrite(ftHandle, readBuffer, writeBuffer, bufferSize, sizeTransferred, isEndTransaction)
FT4222_SPIMaster_SingleReadWrite.argtypes = [FT_HANDLE, POINTER_T(ctypes.c_ubyte), POINTER_T(ctypes.c_ubyte), uint16, POINTER_T(ctypes.c_uint16), BOOL]
FT4222_SPIMaster_SingleReadWrite.__doc__ = \
    """FT4222_STATUS FT4222_SPIMaster_SingleReadWrite(FT_HANDLE ftHandle, LP_c_ubyte readBuffer, LP_c_ubyte writeBuffer, uint16 bufferSize, LP_c_uint16 sizeTransferred, BOOL isEndTransaction)
    LibFT4222.h:327"""
FT4222_SPIMaster_MultiReadWrite = _libraries['LibFT4222-64.dll'].FT4222_SPIMaster_MultiReadWrite
FT4222_SPIMaster_MultiReadWrite.restype = FT4222_STATUS
# FT4222_SPIMaster_MultiReadWrite(ftHandle, readBuffer, writeBuffer, singleWriteBytes, multiWriteBytes, multiReadBytes, sizeOfRead)
FT4222_SPIMaster_MultiReadWrite.argtypes = [FT_HANDLE, POINTER_T(ctypes.c_ubyte), POINTER_T(ctypes.c_ubyte), uint8, uint16, uint16, POINTER_T(ctypes.c_uint32)]
FT4222_SPIMaster_MultiReadWrite.__doc__ = \
    """FT4222_STATUS FT4222_SPIMaster_MultiReadWrite(FT_HANDLE ftHandle, LP_c_ubyte readBuffer, LP_c_ubyte writeBuffer, uint8 singleWriteBytes, uint16 multiWriteBytes, uint16 multiReadBytes, LP_c_uint32 sizeOfRead)
    LibFT4222.h:328"""
FT4222_SPISlave_Init = _libraries['LibFT4222-64.dll'].FT4222_SPISlave_Init
FT4222_SPISlave_Init.restype = FT4222_STATUS
# FT4222_SPISlave_Init(ftHandle)
FT4222_SPISlave_Init.argtypes = [FT_HANDLE]
FT4222_SPISlave_Init.__doc__ = \
    """FT4222_STATUS FT4222_SPISlave_Init(FT_HANDLE ftHandle)
    LibFT4222.h:330"""
FT4222_SPISlave_InitEx = _libraries['LibFT4222-64.dll'].FT4222_SPISlave_InitEx
FT4222_SPISlave_InitEx.restype = FT4222_STATUS
# FT4222_SPISlave_InitEx(ftHandle, protocolOpt)
FT4222_SPISlave_InitEx.argtypes = [FT_HANDLE, SPI_SlaveProtocol]
FT4222_SPISlave_InitEx.__doc__ = \
    """FT4222_STATUS FT4222_SPISlave_InitEx(FT_HANDLE ftHandle, SPI_SlaveProtocol protocolOpt)
    LibFT4222.h:331"""
FT4222_SPISlave_SetMode = _libraries['LibFT4222-64.dll'].FT4222_SPISlave_SetMode
FT4222_SPISlave_SetMode.restype = FT4222_STATUS
# FT4222_SPISlave_SetMode(ftHandle, cpol, cpha)
FT4222_SPISlave_SetMode.argtypes = [FT_HANDLE, FT4222_SPICPOL, FT4222_SPICPHA]
FT4222_SPISlave_SetMode.__doc__ = \
    """FT4222_STATUS FT4222_SPISlave_SetMode(FT_HANDLE ftHandle, FT4222_SPICPOL cpol, FT4222_SPICPHA cpha)
    LibFT4222.h:332"""
FT4222_SPISlave_GetRxStatus = _libraries['LibFT4222-64.dll'].FT4222_SPISlave_GetRxStatus
FT4222_SPISlave_GetRxStatus.restype = FT4222_STATUS
# FT4222_SPISlave_GetRxStatus(ftHandle, pRxSize)
FT4222_SPISlave_GetRxStatus.argtypes = [FT_HANDLE, POINTER_T(ctypes.c_uint16)]
FT4222_SPISlave_GetRxStatus.__doc__ = \
    """FT4222_STATUS FT4222_SPISlave_GetRxStatus(FT_HANDLE ftHandle, LP_c_uint16 pRxSize)
    LibFT4222.h:333"""
FT4222_SPISlave_Read = _libraries['LibFT4222-64.dll'].FT4222_SPISlave_Read
FT4222_SPISlave_Read.restype = FT4222_STATUS
# FT4222_SPISlave_Read(ftHandle, buffer, bufferSize, sizeOfRead)
FT4222_SPISlave_Read.argtypes = [FT_HANDLE, POINTER_T(ctypes.c_ubyte), uint16, POINTER_T(ctypes.c_uint16)]
FT4222_SPISlave_Read.__doc__ = \
    """FT4222_STATUS FT4222_SPISlave_Read(FT_HANDLE ftHandle, LP_c_ubyte buffer, uint16 bufferSize, LP_c_uint16 sizeOfRead)
    LibFT4222.h:334"""
FT4222_SPISlave_Write = _libraries['LibFT4222-64.dll'].FT4222_SPISlave_Write
FT4222_SPISlave_Write.restype = FT4222_STATUS
# FT4222_SPISlave_Write(ftHandle, buffer, bufferSize, sizeTransferred)
FT4222_SPISlave_Write.argtypes = [FT_HANDLE, POINTER_T(ctypes.c_ubyte), uint16, POINTER_T(ctypes.c_uint16)]
FT4222_SPISlave_Write.__doc__ = \
    """FT4222_STATUS FT4222_SPISlave_Write(FT_HANDLE ftHandle, LP_c_ubyte buffer, uint16 bufferSize, LP_c_uint16 sizeTransferred)
    LibFT4222.h:335"""
FT4222_SPISlave_RxQuickResponse = _libraries['LibFT4222-64.dll'].FT4222_SPISlave_RxQuickResponse
FT4222_SPISlave_RxQuickResponse.restype = FT4222_STATUS
# FT4222_SPISlave_RxQuickResponse(ftHandle, enable)
FT4222_SPISlave_RxQuickResponse.argtypes = [FT_HANDLE, BOOL]
FT4222_SPISlave_RxQuickResponse.__doc__ = \
    """FT4222_STATUS FT4222_SPISlave_RxQuickResponse(FT_HANDLE ftHandle, BOOL enable)
    LibFT4222.h:336"""
FT4222_SPI_Reset = _libraries['LibFT4222-64.dll'].FT4222_SPI_Reset
FT4222_SPI_Reset.restype = FT4222_STATUS
# FT4222_SPI_Reset(ftHandle)
FT4222_SPI_Reset.argtypes = [FT_HANDLE]
FT4222_SPI_Reset.__doc__ = \
    """FT4222_STATUS FT4222_SPI_Reset(FT_HANDLE ftHandle)
    LibFT4222.h:338"""
FT4222_SPI_ResetTransaction = _libraries['LibFT4222-64.dll'].FT4222_SPI_ResetTransaction
FT4222_SPI_ResetTransaction.restype = FT4222_STATUS
# FT4222_SPI_ResetTransaction(ftHandle, spiIdx)
FT4222_SPI_ResetTransaction.argtypes = [FT_HANDLE, uint8]
FT4222_SPI_ResetTransaction.__doc__ = \
    """FT4222_STATUS FT4222_SPI_ResetTransaction(FT_HANDLE ftHandle, uint8 spiIdx)
    LibFT4222.h:339"""
FT4222_SPI_SetDrivingStrength = _libraries['LibFT4222-64.dll'].FT4222_SPI_SetDrivingStrength
FT4222_SPI_SetDrivingStrength.restype = FT4222_STATUS
# FT4222_SPI_SetDrivingStrength(ftHandle, clkStrength, ioStrength, ssoStrength)
FT4222_SPI_SetDrivingStrength.argtypes = [FT_HANDLE, SPI_DrivingStrength, SPI_DrivingStrength, SPI_DrivingStrength]
FT4222_SPI_SetDrivingStrength.__doc__ = \
    """FT4222_STATUS FT4222_SPI_SetDrivingStrength(FT_HANDLE ftHandle, SPI_DrivingStrength clkStrength, SPI_DrivingStrength ioStrength, SPI_DrivingStrength ssoStrength)
    LibFT4222.h:340"""
FT4222_I2CMaster_Init = _libraries['LibFT4222-64.dll'].FT4222_I2CMaster_Init
FT4222_I2CMaster_Init.restype = FT4222_STATUS
# FT4222_I2CMaster_Init(ftHandle, kbps)
FT4222_I2CMaster_Init.argtypes = [FT_HANDLE, uint32]
FT4222_I2CMaster_Init.__doc__ = \
    """FT4222_STATUS FT4222_I2CMaster_Init(FT_HANDLE ftHandle, uint32 kbps)
    LibFT4222.h:345"""
FT4222_I2CMaster_Read = _libraries['LibFT4222-64.dll'].FT4222_I2CMaster_Read
FT4222_I2CMaster_Read.restype = FT4222_STATUS
# FT4222_I2CMaster_Read(ftHandle, deviceAddress, buffer, bufferSize, sizeTransferred)
FT4222_I2CMaster_Read.argtypes = [FT_HANDLE, uint16, POINTER_T(ctypes.c_ubyte), uint16, POINTER_T(ctypes.c_uint16)]
FT4222_I2CMaster_Read.__doc__ = \
    """FT4222_STATUS FT4222_I2CMaster_Read(FT_HANDLE ftHandle, uint16 deviceAddress, LP_c_ubyte buffer, uint16 bufferSize, LP_c_uint16 sizeTransferred)
    LibFT4222.h:346"""
FT4222_I2CMaster_Write = _libraries['LibFT4222-64.dll'].FT4222_I2CMaster_Write
FT4222_I2CMaster_Write.restype = FT4222_STATUS
# FT4222_I2CMaster_Write(ftHandle, deviceAddress, buffer, bufferSize, sizeTransferred)
FT4222_I2CMaster_Write.argtypes = [FT_HANDLE, uint16, POINTER_T(ctypes.c_ubyte), uint16, POINTER_T(ctypes.c_uint16)]
FT4222_I2CMaster_Write.__doc__ = \
    """FT4222_STATUS FT4222_I2CMaster_Write(FT_HANDLE ftHandle, uint16 deviceAddress, LP_c_ubyte buffer, uint16 bufferSize, LP_c_uint16 sizeTransferred)
    LibFT4222.h:347"""
FT4222_I2CMaster_ReadEx = _libraries['LibFT4222-64.dll'].FT4222_I2CMaster_ReadEx
FT4222_I2CMaster_ReadEx.restype = FT4222_STATUS
# FT4222_I2CMaster_ReadEx(ftHandle, deviceAddress, flag, buffer, bufferSize, sizeTransferred)
FT4222_I2CMaster_ReadEx.argtypes = [FT_HANDLE, uint16, uint8, POINTER_T(ctypes.c_ubyte), uint16, POINTER_T(ctypes.c_uint16)]
FT4222_I2CMaster_ReadEx.__doc__ = \
    """FT4222_STATUS FT4222_I2CMaster_ReadEx(FT_HANDLE ftHandle, uint16 deviceAddress, uint8 flag, LP_c_ubyte buffer, uint16 bufferSize, LP_c_uint16 sizeTransferred)
    LibFT4222.h:348"""
FT4222_I2CMaster_WriteEx = _libraries['LibFT4222-64.dll'].FT4222_I2CMaster_WriteEx
FT4222_I2CMaster_WriteEx.restype = FT4222_STATUS
# FT4222_I2CMaster_WriteEx(ftHandle, deviceAddress, flag, buffer, bufferSize, sizeTransferred)
FT4222_I2CMaster_WriteEx.argtypes = [FT_HANDLE, uint16, uint8, POINTER_T(ctypes.c_ubyte), uint16, POINTER_T(ctypes.c_uint16)]
FT4222_I2CMaster_WriteEx.__doc__ = \
    """FT4222_STATUS FT4222_I2CMaster_WriteEx(FT_HANDLE ftHandle, uint16 deviceAddress, uint8 flag, LP_c_ubyte buffer, uint16 bufferSize, LP_c_uint16 sizeTransferred)
    LibFT4222.h:349"""
FT4222_I2CMaster_Reset = _libraries['LibFT4222-64.dll'].FT4222_I2CMaster_Reset
FT4222_I2CMaster_Reset.restype = FT4222_STATUS
# FT4222_I2CMaster_Reset(ftHandle)
FT4222_I2CMaster_Reset.argtypes = [FT_HANDLE]
FT4222_I2CMaster_Reset.__doc__ = \
    """FT4222_STATUS FT4222_I2CMaster_Reset(FT_HANDLE ftHandle)
    LibFT4222.h:350"""
FT4222_I2CMaster_GetStatus = _libraries['LibFT4222-64.dll'].FT4222_I2CMaster_GetStatus
FT4222_I2CMaster_GetStatus.restype = FT4222_STATUS
# FT4222_I2CMaster_GetStatus(ftHandle, controllerStatus)
FT4222_I2CMaster_GetStatus.argtypes = [FT_HANDLE, POINTER_T(ctypes.c_ubyte)]
FT4222_I2CMaster_GetStatus.__doc__ = \
    """FT4222_STATUS FT4222_I2CMaster_GetStatus(FT_HANDLE ftHandle, LP_c_ubyte controllerStatus)
    LibFT4222.h:351"""
FT4222_I2CSlave_Init = _libraries['LibFT4222-64.dll'].FT4222_I2CSlave_Init
FT4222_I2CSlave_Init.restype = FT4222_STATUS
# FT4222_I2CSlave_Init(ftHandle)
FT4222_I2CSlave_Init.argtypes = [FT_HANDLE]
FT4222_I2CSlave_Init.__doc__ = \
    """FT4222_STATUS FT4222_I2CSlave_Init(FT_HANDLE ftHandle)
    LibFT4222.h:354"""
FT4222_I2CSlave_Reset = _libraries['LibFT4222-64.dll'].FT4222_I2CSlave_Reset
FT4222_I2CSlave_Reset.restype = FT4222_STATUS
# FT4222_I2CSlave_Reset(ftHandle)
FT4222_I2CSlave_Reset.argtypes = [FT_HANDLE]
FT4222_I2CSlave_Reset.__doc__ = \
    """FT4222_STATUS FT4222_I2CSlave_Reset(FT_HANDLE ftHandle)
    LibFT4222.h:355"""
FT4222_I2CSlave_GetAddress = _libraries['LibFT4222-64.dll'].FT4222_I2CSlave_GetAddress
FT4222_I2CSlave_GetAddress.restype = FT4222_STATUS
# FT4222_I2CSlave_GetAddress(ftHandle, addr)
FT4222_I2CSlave_GetAddress.argtypes = [FT_HANDLE, POINTER_T(ctypes.c_ubyte)]
FT4222_I2CSlave_GetAddress.__doc__ = \
    """FT4222_STATUS FT4222_I2CSlave_GetAddress(FT_HANDLE ftHandle, LP_c_ubyte addr)
    LibFT4222.h:356"""
FT4222_I2CSlave_SetAddress = _libraries['LibFT4222-64.dll'].FT4222_I2CSlave_SetAddress
FT4222_I2CSlave_SetAddress.restype = FT4222_STATUS
# FT4222_I2CSlave_SetAddress(ftHandle, addr)
FT4222_I2CSlave_SetAddress.argtypes = [FT_HANDLE, uint8]
FT4222_I2CSlave_SetAddress.__doc__ = \
    """FT4222_STATUS FT4222_I2CSlave_SetAddress(FT_HANDLE ftHandle, uint8 addr)
    LibFT4222.h:357"""
FT4222_I2CSlave_GetRxStatus = _libraries['LibFT4222-64.dll'].FT4222_I2CSlave_GetRxStatus
FT4222_I2CSlave_GetRxStatus.restype = FT4222_STATUS
# FT4222_I2CSlave_GetRxStatus(ftHandle, pRxSize)
FT4222_I2CSlave_GetRxStatus.argtypes = [FT_HANDLE, POINTER_T(ctypes.c_uint16)]
FT4222_I2CSlave_GetRxStatus.__doc__ = \
    """FT4222_STATUS FT4222_I2CSlave_GetRxStatus(FT_HANDLE ftHandle, LP_c_uint16 pRxSize)
    LibFT4222.h:358"""
FT4222_I2CSlave_Read = _libraries['LibFT4222-64.dll'].FT4222_I2CSlave_Read
FT4222_I2CSlave_Read.restype = FT4222_STATUS
# FT4222_I2CSlave_Read(ftHandle, buffer, bufferSize, sizeTransferred)
FT4222_I2CSlave_Read.argtypes = [FT_HANDLE, POINTER_T(ctypes.c_ubyte), uint16, POINTER_T(ctypes.c_uint16)]
FT4222_I2CSlave_Read.__doc__ = \
    """FT4222_STATUS FT4222_I2CSlave_Read(FT_HANDLE ftHandle, LP_c_ubyte buffer, uint16 bufferSize, LP_c_uint16 sizeTransferred)
    LibFT4222.h:359"""
FT4222_I2CSlave_Write = _libraries['LibFT4222-64.dll'].FT4222_I2CSlave_Write
FT4222_I2CSlave_Write.restype = FT4222_STATUS
# FT4222_I2CSlave_Write(ftHandle, buffer, bufferSize, sizeTransferred)
FT4222_I2CSlave_Write.argtypes = [FT_HANDLE, POINTER_T(ctypes.c_ubyte), uint16, POINTER_T(ctypes.c_uint16)]
FT4222_I2CSlave_Write.__doc__ = \
    """FT4222_STATUS FT4222_I2CSlave_Write(FT_HANDLE ftHandle, LP_c_ubyte buffer, uint16 bufferSize, LP_c_uint16 sizeTransferred)
    LibFT4222.h:360"""
FT4222_I2CSlave_SetClockStretch = _libraries['LibFT4222-64.dll'].FT4222_I2CSlave_SetClockStretch
FT4222_I2CSlave_SetClockStretch.restype = FT4222_STATUS
# FT4222_I2CSlave_SetClockStretch(ftHandle, enable)
FT4222_I2CSlave_SetClockStretch.argtypes = [FT_HANDLE, BOOL]
FT4222_I2CSlave_SetClockStretch.__doc__ = \
    """FT4222_STATUS FT4222_I2CSlave_SetClockStretch(FT_HANDLE ftHandle, BOOL enable)
    LibFT4222.h:361"""
FT4222_I2CSlave_SetRespWord = _libraries['LibFT4222-64.dll'].FT4222_I2CSlave_SetRespWord
FT4222_I2CSlave_SetRespWord.restype = FT4222_STATUS
# FT4222_I2CSlave_SetRespWord(ftHandle, responseWord)
FT4222_I2CSlave_SetRespWord.argtypes = [FT_HANDLE, uint8]
FT4222_I2CSlave_SetRespWord.__doc__ = \
    """FT4222_STATUS FT4222_I2CSlave_SetRespWord(FT_HANDLE ftHandle, uint8 responseWord)
    LibFT4222.h:362"""
FT4222_GPIO_Init = _libraries['LibFT4222-64.dll'].FT4222_GPIO_Init
FT4222_GPIO_Init.restype = FT4222_STATUS
# FT4222_GPIO_Init(ftHandle, gpioDir)
FT4222_GPIO_Init.argtypes = [FT_HANDLE, GPIO_Dir * 4]
FT4222_GPIO_Init.__doc__ = \
    """FT4222_STATUS FT4222_GPIO_Init(FT_HANDLE ftHandle, array_GPIO_Dir gpioDir)
    LibFT4222.h:367"""
FT4222_GPIO_Read = _libraries['LibFT4222-64.dll'].FT4222_GPIO_Read
FT4222_GPIO_Read.restype = FT4222_STATUS
# FT4222_GPIO_Read(ftHandle, portNum, value)
FT4222_GPIO_Read.argtypes = [FT_HANDLE, GPIO_Port, POINTER_T(ctypes.c_int32)]
FT4222_GPIO_Read.__doc__ = \
    """FT4222_STATUS FT4222_GPIO_Read(FT_HANDLE ftHandle, GPIO_Port portNum, LP_c_int32 value)
    LibFT4222.h:368"""
FT4222_GPIO_Write = _libraries['LibFT4222-64.dll'].FT4222_GPIO_Write
FT4222_GPIO_Write.restype = FT4222_STATUS
# FT4222_GPIO_Write(ftHandle, portNum, bValue)
FT4222_GPIO_Write.argtypes = [FT_HANDLE, GPIO_Port, BOOL]
FT4222_GPIO_Write.__doc__ = \
    """FT4222_STATUS FT4222_GPIO_Write(FT_HANDLE ftHandle, GPIO_Port portNum, BOOL bValue)
    LibFT4222.h:369"""
FT4222_GPIO_SetInputTrigger = _libraries['LibFT4222-64.dll'].FT4222_GPIO_SetInputTrigger
FT4222_GPIO_SetInputTrigger.restype = FT4222_STATUS
# FT4222_GPIO_SetInputTrigger(ftHandle, portNum, trigger)
FT4222_GPIO_SetInputTrigger.argtypes = [FT_HANDLE, GPIO_Port, GPIO_Trigger]
FT4222_GPIO_SetInputTrigger.__doc__ = \
    """FT4222_STATUS FT4222_GPIO_SetInputTrigger(FT_HANDLE ftHandle, GPIO_Port portNum, GPIO_Trigger trigger)
    LibFT4222.h:370"""
FT4222_GPIO_GetTriggerStatus = _libraries['LibFT4222-64.dll'].FT4222_GPIO_GetTriggerStatus
FT4222_GPIO_GetTriggerStatus.restype = FT4222_STATUS
# FT4222_GPIO_GetTriggerStatus(ftHandle, portNum, queueSize)
FT4222_GPIO_GetTriggerStatus.argtypes = [FT_HANDLE, GPIO_Port, POINTER_T(ctypes.c_uint16)]
FT4222_GPIO_GetTriggerStatus.__doc__ = \
    """FT4222_STATUS FT4222_GPIO_GetTriggerStatus(FT_HANDLE ftHandle, GPIO_Port portNum, LP_c_uint16 queueSize)
    LibFT4222.h:371"""
FT4222_GPIO_ReadTriggerQueue = _libraries['LibFT4222-64.dll'].FT4222_GPIO_ReadTriggerQueue
FT4222_GPIO_ReadTriggerQueue.restype = FT4222_STATUS
# FT4222_GPIO_ReadTriggerQueue(ftHandle, portNum, events, readSize, sizeofRead)
FT4222_GPIO_ReadTriggerQueue.argtypes = [FT_HANDLE, GPIO_Port, POINTER_T(GPIO_Trigger), uint16, POINTER_T(ctypes.c_uint16)]
FT4222_GPIO_ReadTriggerQueue.__doc__ = \
    """FT4222_STATUS FT4222_GPIO_ReadTriggerQueue(FT_HANDLE ftHandle, GPIO_Port portNum, LP_GPIO_Trigger events, uint16 readSize, LP_c_uint16 sizeofRead)
    LibFT4222.h:372"""
FT4222_GPIO_SetWaveFormMode = _libraries['LibFT4222-64.dll'].FT4222_GPIO_SetWaveFormMode
FT4222_GPIO_SetWaveFormMode.restype = FT4222_STATUS
# FT4222_GPIO_SetWaveFormMode(ftHandle, enable)
FT4222_GPIO_SetWaveFormMode.argtypes = [FT_HANDLE, BOOL]
FT4222_GPIO_SetWaveFormMode.__doc__ = \
    """FT4222_STATUS FT4222_GPIO_SetWaveFormMode(FT_HANDLE ftHandle, BOOL enable)
    LibFT4222.h:373"""
__all__ = \
    ['FT4222_SPISlave_Init', 'FT4222_VENDER_CMD_NOT_SUPPORTED',
    'START_AND_STOP', 'FT4222_EEPROM_WRITE_FAILED', 'CLK_DIV_8',
    'FT4222_GetMaxTransferSize', 'FT4222_STATUS',
    'FT4222_SPISlave_InitEx', 'FT4222_OTHER_ERROR',
    'FT4222_DEVICE_NOT_FOUND', 'FT4222_I2CMaster_WriteEx',
    'GPIO_OUTPUT_LOW', 'FT4222_INSUFFICIENT_RESOURCES',
    'FT4222_I2C_MASTER', 'FT4222_SPISlave_Write',
    'FT4222_I2CMaster_Write', 'FT4222_SPICPOL',
    'struct_FT4222_Version', 'NONE', 'FT4222_WRONG_I2C_ADDR',
    'FT4222_SPICPHA', 'FT4222_I2CMaster_Reset', 'DS_12MA',
    'FT4222_EEPROM_NOT_PROGRAMMED', 'CLK_DIV_512',
    'SPI_SLAVE_NO_PROTOCOL', 'FT4222_SPI_SLAVE',
    'FT4222_SPIMaster_SingleRead', 'FT4222_INVALID_BAUD_RATE',
    'FT4222_INVALID_HANDLE', 'GPIO_TRIGGER_RISING',
    'FT4222_SetInterruptTrigger', 'FT4222_I2CSlave_GetRxStatus',
    'GPIO_OUTPUT_HIGH', 'uint64', 'FT4222_GPIO_Write',
    'FT4222_SPIClock', 'GPIO_PORT3', 'CLK_DIV_2',
    'FT4222_SPIMaster_SingleWrite', 'SPI_IO_NONE',
    'FT4222_SetEventNotification',
    'FT4222_GPIO_PULLDOWN_INVALID_IN_INPUTMODE',
    'FT4222_INVALID_POINTER', 'FT4222_GPIO_ReadTriggerQueue',
    'CLK_DIV_64', 'GPIO_PORT1', 'int8', 'FT4222_EEPROM_ERASE_FAILED',
    'SYS_CLK_60', 'FT4222_UnInitialize', 'FT4222_I2CMaster_GetStatus',
    'FT4222_SPISlave_GetRxStatus', 'CLK_DIV_256',
    'FT4222_I2CSlave_Reset', 'FT4222_SPISlave_SetMode',
    'FT4222_GPIO_Init', 'int32', 'SYS_CLK_24', 'uint8',
    'FT4222_EEPROM_READ_FAILED', 'FT4222_SPIMaster_MultiReadWrite',
    'CLK_DIV_4', 'GPIO_INPUT', 'FT4222_GPIO_SetInputTrigger',
    'SPI_IO_QUAD', 'FT4222_GPIO_SetWaveFormMode', 'FT4222_GPIO_Read',
    'SYS_CLK_48', 'FT4222_OK', 'FT4222_SetSuspendOut',
    'FT4222_ChipReset', 'FT4222_I2CMaster_Init',
    'FT4222_GPIO_NOT_SUPPORTED_IN_THIS_MODE',
    'FT4222_IS_NOT_SPI_SINGLE_MODE', 'PVOID',
    'FT4222_DEVICE_NOT_OPENED_FOR_ERASE', 'GPIO_TRIGGER_LEVEL_HIGH',
    'DS_16MA', 'GPIO_TRIGGER_LEVEL_LOW', 'STOP',
    'SPI_SLAVE_WITH_PROTOCOL', 'CLK_TRAILING', 'DS_8MA', 'int64',
    'GPIO_PORT2', 'FT4222_SPI_Reset', 'FT4222_I2CSlave_Read',
    'FT4222_EEPROM_NOT_PRESENT', 'uint32', 'FT4222_IS_NOT_I2C_MODE',
    'int16', 'SPI_DrivingStrength', 'FT4222_I2CSlave_SetAddress',
    'GPIO_PORT0', 'FT4222_DEVICE_NOT_SUPPORTED', 'GPIO_Trigger',
    'CLK_IDLE_LOW', 'FT4222_I2CSlave_GetAddress', 'FT4222_FUNCTION',
    'FT4222_SetWakeUpInterrupt', 'FT4222_SPI_SetDrivingStrength',
    'DWORD', 'CLK_DIV_16', 'FT4222_ClockRate',
    'FT4222_I2CSlave_SetRespWord', 'GPIO_OUTPUT', 'CLK_LEADING',
    'uint16', 'CLK_NONE', 'START', 'FT4222_FUN_NOT_SUPPORT',
    'Repeated_START', 'GPIO_Port', 'FT4222_I2CSlave_SetClockStretch',
    'BOOL', 'FT4222_IS_NOT_SPI_MODE', 'I2C_MasterFlag', 'CLK_DIV_128',
    'FT4222_GetClock', 'FT4222_SPIMaster_SetLines',
    'FT4222_I2C_NOT_SUPPORTED_IN_THIS_MODE',
    'FT4222_GPIO_INPUT_NOT_SUPPORTED', 'FT4222_IO_ERROR',
    'FT4222_GPIO_PULLUP_INVALID_IN_INPUTMODE',
    'FT4222_INVALID_PARAMETER', 'GPIO_Output', 'GPIO_TRIGGER_FALLING',
    'FT4222_SPISlave_RxQuickResponse', 'FT4222_CLK_NOT_SUPPORTED',
    'FT4222_EXCEEDED_MAX_TRANSFER_SIZE', 'DS_4MA',
    'FT4222_GPIO_GetTriggerStatus', 'FT4222_SPIMode',
    'FT4222_SPISlave_Read', 'SYS_CLK_80', 'FT4222_SetClock',
    'FT4222_I2CMaster_Read', 'FT4222_INTERRUPT_NOT_SUPPORTED',
    'SPI_IO_SINGLE', 'FT4222_I2CSlave_Write', 'FT_HANDLE',
    'struct_SPI_Slave_Header', 'FT4222_I2CSlave_Init',
    'FT4222_NOT_SUPPORTED', 'SPI_SLAVE_NO_ACK', 'CLK_IDLE_HIGH',
    'FT4222_GPIO_WRITE_NOT_SUPPORTED', 'FT4222_FAILED_TO_READ_DEVICE',
    'FT4222_SPIMaster_Init', 'FT4222_INVALID_ARGS', 'CLK_DIV_32',
    'FT4222_FAILED_TO_WRITE_DEVICE', 'FT4222_SPI_ResetTransaction',
    'FT4222_SPI_MASTER', 'FT4222_I2CMaster_ReadEx',
    'FT4222_INVAILD_FUNCTION', 'SPI_IO_DUAL',
    'FT4222_GPIO_OPENDRAIN_INVALID_IN_OUTPUTMODE',
    'FT4222_EVENT_NOT_SUPPORTED', 'FT4222_IS_NOT_SPI_MULTI_MODE',
    'FT4222_DEVICE_NOT_OPENED_FOR_WRITE',
    'FT4222_GPIO_EXCEEDED_MAX_PORTNUM', 'FT4222_I2C_SLAVE',
    'FT4222_DEVICE_NOT_OPENED', 'GPIO_Dir', 'SPI_SlaveProtocol',
    'FT4222_SPIMaster_SingleReadWrite', 'FT4222_GetVersion',
    'FT4222_Version', 'FT4222_DEVICE_LIST_NOT_READY']
